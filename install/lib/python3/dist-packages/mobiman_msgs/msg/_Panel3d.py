# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobiman_msgs/Panel3d.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mobiman_msgs.msg

class Panel3d(genpy.Message):
  _md5sum = "a836babba9d9025b436af0ca907d0866"
  _type = "mobiman_msgs/Panel3d"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point origin
geometry_msgs/Vector3 normal
float32 length
float32 width
Button3d[] buttons_3d
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: mobiman_msgs/Button3d
geometry_msgs/Pose pose
ButtonSemantics button_semantics
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: mobiman_msgs/ButtonSemantics
string name
uint8 button_status
"""
  __slots__ = ['origin','normal','length','width','buttons_3d']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Vector3','float32','float32','mobiman_msgs/Button3d[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       origin,normal,length,width,buttons_3d

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Panel3d, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.buttons_3d is None:
        self.buttons_3d = []
    else:
      self.origin = geometry_msgs.msg.Point()
      self.normal = geometry_msgs.msg.Vector3()
      self.length = 0.
      self.width = 0.
      self.buttons_3d = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d2f().pack(_x.origin.x, _x.origin.y, _x.origin.z, _x.normal.x, _x.normal.y, _x.normal.z, _x.length, _x.width))
      length = len(self.buttons_3d)
      buff.write(_struct_I.pack(length))
      for val1 in self.buttons_3d:
        _v1 = val1.pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v4 = val1.button_semantics
        _x = _v4.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v4.button_status
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.buttons_3d is None:
        self.buttons_3d = None
      end = 0
      _x = self
      start = end
      end += 56
      (_x.origin.x, _x.origin.y, _x.origin.z, _x.normal.x, _x.normal.y, _x.normal.z, _x.length, _x.width,) = _get_struct_6d2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.buttons_3d = []
      for i in range(0, length):
        val1 = mobiman_msgs.msg.Button3d()
        _v5 = val1.pose
        _v6 = _v5.position
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v7 = _v5.orientation
        _x = _v7
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v8 = val1.button_semantics
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v8.name = str[start:end]
        start = end
        end += 1
        (_v8.button_status,) = _get_struct_B().unpack(str[start:end])
        self.buttons_3d.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d2f().pack(_x.origin.x, _x.origin.y, _x.origin.z, _x.normal.x, _x.normal.y, _x.normal.z, _x.length, _x.width))
      length = len(self.buttons_3d)
      buff.write(_struct_I.pack(length))
      for val1 in self.buttons_3d:
        _v9 = val1.pose
        _v10 = _v9.position
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = _v9.orientation
        _x = _v11
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v12 = val1.button_semantics
        _x = _v12.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v12.button_status
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.buttons_3d is None:
        self.buttons_3d = None
      end = 0
      _x = self
      start = end
      end += 56
      (_x.origin.x, _x.origin.y, _x.origin.z, _x.normal.x, _x.normal.y, _x.normal.z, _x.length, _x.width,) = _get_struct_6d2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.buttons_3d = []
      for i in range(0, length):
        val1 = mobiman_msgs.msg.Button3d()
        _v13 = val1.pose
        _v14 = _v13.position
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v15 = _v13.orientation
        _x = _v15
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v16 = val1.button_semantics
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v16.name = str[start:end]
        start = end
        end += 1
        (_v16.button_status,) = _get_struct_B().unpack(str[start:end])
        self.buttons_3d.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6d2f = None
def _get_struct_6d2f():
    global _struct_6d2f
    if _struct_6d2f is None:
        _struct_6d2f = struct.Struct("<6d2f")
    return _struct_6d2f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
